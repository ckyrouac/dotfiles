#!/bin/bash

show_help() {
    cat << EOF
Usage: worktree [OPTIONS] [<worktree-name>]

Create, delete, or list git worktrees with associated tmux sessions.

Options:
    -d, --delete    Delete the specified worktree and its tmux session
    -l, --list      List all worktrees (with git worktree or tmux session)
    -r, --root      Switch to the project root directory
    -h, --help      Show this help message

Examples:
    worktree                    # List all worktrees (default)
    worktree feature-branch     # Create worktree and tmux session
    worktree -d feature-branch  # Delete worktree and tmux session
    worktree -l                 # List all worktrees
    worktree -r                 # Switch to project root
EOF
}

get_project() {
    local current_path=$(pwd)
    if [[ $current_path =~ /projects/([^/]+) ]]; then
        echo "${BASH_REMATCH[1]}"
    elif [[ $current_path =~ /worktrees/([^/]+) ]]; then
        echo "${BASH_REMATCH[1]}"
    else
        echo ""
    fi
}

switch_to_root() {
    local current_path=$(pwd)
    local project_name=$(get_project)
    
    if [ -z "$project_name" ]; then
        echo "Error: Must be run from within a project directory (/*/projects/* or /*/worktrees/*)"
        exit 1
    fi
    
    # If already in project root, do nothing
    if [[ $current_path =~ /projects/$project_name$ ]]; then
        echo "Already in project root: $current_path"
        return
    fi
    
    # Find project root directory
    local project_root=""
    if [[ $current_path =~ (/[^/]*/projects/$project_name) ]]; then
        project_root="${BASH_REMATCH[1]}"
    else
        # Look for project in common locations
        for base in "$HOME/projects" "/var/home/*/projects"; do
            if [ -d "$base/$project_name" ]; then
                project_root="$base/$project_name"
                break
            fi
        done
    fi
    
    if [ -z "$project_root" ] || [ ! -d "$project_root" ]; then
        echo "Error: Could not find project root for '$project_name'"
        exit 1
    fi
    
    echo "Switching to project root: $project_root"
    tmux-sessionizer -s "$project_root"
}

list_worktrees() {
    PROJECT=$(get_project)
    
    if [ -z "$PROJECT" ]; then
        echo "Error: Must be run from within a project directory (/*/projects/* or /*/worktrees/*)"
        exit 1
    fi
    
    echo "Worktrees for project: $PROJECT"
    echo "================================"
    
    # Get all worktrees from git
    declare -A worktrees
    
    # Check git worktrees
    if git worktree list 2>/dev/null | grep -q "$HOME/worktrees/$PROJECT/"; then
        while IFS= read -r line; do
            if [[ $line =~ $HOME/worktrees/$PROJECT/([^[:space:]]+) ]]; then
                worktree_name="${BASH_REMATCH[1]}"
                worktrees["$worktree_name"]="git"
            fi
        done < <(git worktree list 2>/dev/null)
    fi
    
    # Check tmux sessions
    if tmux list-sessions 2>/dev/null | grep -q "^$PROJECT/"; then
        while IFS= read -r line; do
            if [[ $line =~ ^$PROJECT/([^:]+): ]]; then
                worktree_name="${BASH_REMATCH[1]}"
                if [[ -n "${worktrees[$worktree_name]}" ]]; then
                    worktrees["$worktree_name"]="git+tmux"
                else
                    worktrees["$worktree_name"]="tmux"
                fi
            fi
        done < <(tmux list-sessions 2>/dev/null)
    fi
    
    # Display results
    if [ ${#worktrees[@]} -eq 0 ]; then
        echo "No worktrees found"
    else
        for worktree in "${!worktrees[@]}"; do
            printf "  %-20s [%s]\n" "$worktree" "${worktrees[$worktree]}"
        done
    fi
}

DELETE=false
LIST=false
ROOT=false

while [[ $# -gt 0 ]]; do
    case $1 in
        -d|--delete)
            DELETE=true
            shift
            ;;
        -l|--list)
            LIST=true
            shift
            ;;
        -r|--root)
            ROOT=true
            shift
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        *)
            WORKTREE=$1
            shift
            ;;
    esac
done

if [ "$ROOT" = true ]; then
    switch_to_root
    exit 0
fi

if [ "$LIST" = true ] || [ -z "$WORKTREE" ]; then
    list_worktrees
    exit 0
fi

PROJECT=$(get_project)

if [ -z "$PROJECT" ]; then
    echo "Error: Must be run from within a project directory (/*/projects/* or /*/worktrees/*)"
    exit 1
fi

if [ "$DELETE" = true ]; then
    # Delete tmux session if it exists
    if tmux has-session -t "$PROJECT/$WORKTREE" 2>/dev/null; then
        tmux kill-session -t "$PROJECT/$WORKTREE"
    fi
    
    # Delete git worktree if it exists
    if [ -d "$HOME/worktrees/$PROJECT/$WORKTREE" ]; then
        git worktree remove --force "$HOME/worktrees/$PROJECT/$WORKTREE"
    fi
else
    # Create git worktree
    git worktree add "$HOME/worktrees/$PROJECT/$WORKTREE"
    
    # Copy .claude directory and CLAUDE.md from root project if they exist
    local project_root=$(git rev-parse --show-toplevel)
    local worktree_path="$HOME/worktrees/$PROJECT/$WORKTREE"
    
    if [ -d "$project_root/.claude" ]; then
        cp -r "$project_root/.claude" "$worktree_path/"
        echo "Copied .claude directory to worktree"
    fi
    
    if [ -f "$project_root/CLAUDE.md" ]; then
        cp "$project_root/CLAUDE.md" "$worktree_path/"
        echo "Copied CLAUDE.md to worktree"
    fi
    
    # Create tmux session
    tmux-sessionizer -s "$HOME/worktrees/$PROJECT/$WORKTREE"
    
    # Attach to session
    tmux attach-session -t "$PROJECT/$WORKTREE"
fi
