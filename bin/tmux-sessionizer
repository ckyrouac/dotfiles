#!/usr/bin/env bash
#
# Based off https://github.com/ThePrimeagen/.dotfiles/blob/602019e902634188ab06ea31251c01c1a43d1621/bin/.local/scripts/tmux-sessionizer
#
function usage() {
  echo -e "Usage:\n"
  echo -e "tmux-sessionizer <switch>\n"

  printf "%-25s %s\n" "Switches:" ""
  printf "%-25s %s\n" "-a, --all" "All projects in defined directories"
  printf "%-25s %s\n" "-e, --existing" "Existing tmux sessions"
  printf "%-25s %s\n" "-s, --session" "Specify the session to switch to"

  printf "%-25s %s\n" "" ""
  printf "%-25s %s\n" "-h, --help" ""
}

function args()
{
    options=$(getopt -o p:haesk --long session --long kill --long help --long existing --long all -- "$@")
    option_code=$?
    [ "$option_code" -eq 0 ] || {
        echo "Incorrect option provided"
        usage
        exit 1
    }
    eval set -- "$options"
    i=0
    while true; do
        case "$1" in
        -a)
          ALL=true
          i=$((i+1))
          ;;
        --all)
          ALL=true
          i=$((i+1))
          ;;
        -k)
          KILL=true
          i=$((i+1))
          ;;
        --kill)
          KILL=true
          i=$((i+1))
          ;;
        -e)
          EXISTING=true
          i=$((i+1))
          ;;
        --existing)
          EXISTING=true
          i=$((i+1))
          ;;
        -s)
          SESSION=true
          i=$((i+1))
          ;;
        --session)
          SESSION=true
          i=$((i+1))
          ;;
        -h)
          usage
          exit 1;
          ;;
        --help)
          usage
          exit 1;
          ;;
        --)
        shift
        break
        ;;
        esac
        shift
    done
}

args "$0" "$@"

# prevent multiple switches
num_switches=$i
if [ "$num_switches" -gt 1 ]; then
    echo "Only one switch can be used at a time"
    usage
    exit 1
fi

function init_session()
{
    dir=$1
    session_name=$2

    tmux select-window -t "$session_name:1"
    tmux rename-window -t "$session_name:1" vim
    tmux split-window -v -l 40% -c "$dir" -t "$session_name:1"
    tmux select-pane -t "$session_name:1.1"
    tmux resize-pane -t "$session_name:1.1" -Z
    tmux send-keys -t "$session_name:1.1" "nvim" Enter
}

function switch-session()
{
    selected=$1

    if [[ -z $selected ]]; then
        exit 0
    fi

    type="existing"
    is_worktree=$(dirname "$selected" | xargs dirname | xargs basename) 
    if [[ "$is_worktree" == "worktrees" ]]; then
        type="worktree"
    fi
    is_project=$(dirname "$selected" | xargs basename)
    if [[ "$is_project" == "projects" ]]; then
        type="project"
    fi

    selected_name="$selected"
    if [[ "$type" == "project" ]]; then
        selected_name=$(basename "$selected" | tr . _)
    elif [[ "$type" == "worktree" ]]; then
        project_name=$(dirname "$selected" | xargs basename)
        worktree_name=$(basename "$selected")
        selected_name="$project_name/$worktree_name"
    fi

    tmux_running=$(pgrep tmux)

    if [[ -z $TMUX ]] && [[ -z $tmux_running ]]; then
        tmux new-session -s "$selected_name" -c "$selected"
        init_session "$selected" "$selected_name"
        exit 0
    fi

    if ! tmux has-session -t="$selected_name" 2> /dev/null; then
        tmux new-session -ds "$selected_name" -c "$selected"
        init_session "$selected" "$selected_name"
    fi

    tmux switch-client -t "$selected_name"
}

# default to all
if [ -z "$ALL" ] && [ -z "$EXISTING" ] && [ -z "$KILL" ] && [ -z "$SESSION" ]; then
    ALL=true
fi

if [ "$ALL" = true ]; then
    worktrees=$(find ~/worktrees -mindepth 2 -maxdepth 2 -type d)
    selected=$(find ~/projects -mindepth 1 -maxdepth 1 -type d)
    switch=$(echo -e "$selected\n$worktrees" | fzf-tmux -p --reverse)
    switch-session "$switch"
    exit 0
elif [ "$EXISTING" = true ]; then
    selected=$(tmux list-sessions -F "#S" | fzf-tmux -p --reverse)
    switch-session "$selected"
    exit 0
elif [ "$KILL" = true ]; then
    selected=$(tmux list-sessions -F "#S" | fzf-tmux -p --reverse)
    if [[ -z $selected ]]; then
        exit 0
    fi
    tmux kill-session -t "$selected"
    exit 0
elif [ "$SESSION" = true ]; then
    selected=$2
    if [ -z "$selected" ]; then
        echo "No session specified"
        usage
        exit 1
    fi
    switch-session "$selected"
    exit 0
fi
