#compdef worktree

_worktree() {
    local context state line
    local -a opts worktrees
    
    opts=(
        '-d[delete worktree]:worktree name:_worktree_names'
        '--delete[delete worktree]:worktree name:_worktree_names'
        '-l[list worktrees]'
        '--list[list worktrees]'
        '-r[show root directory]'
        '--root[show root directory]'
        '-h[show help]'
        '--help[show help]'
        '*:worktree name:_worktree_names'
    )
    
    _arguments -C $opts
}

_worktree_names() {
    local -a worktrees
    local project_name current_path
    
    current_path=$PWD
    
    # Get current project name
    if [[ $current_path =~ '/projects/([^/]+)' ]]; then
        project_name="${match[1]}"
    elif [[ $current_path =~ '/worktrees/([^/]+)' ]]; then
        project_name="${match[1]}"
    else
        return 0
    fi
    
    # Get existing worktree names
    worktrees=()
    
    # Get git worktrees
    if git worktree list 2>/dev/null | grep -q "$HOME/worktrees/$project_name/"; then
        while IFS= read -r line; do
            if [[ $line =~ "$HOME/worktrees/$project_name/([^[:space:]]+)" ]]; then
                worktrees+=("${match[1]}")
            fi
        done < <(git worktree list 2>/dev/null)
    fi
    
    # Get tmux sessions that might not have corresponding git worktrees
    if tmux list-sessions 2>/dev/null | grep -q "^$project_name/"; then
        while IFS= read -r line; do
            if [[ $line =~ "^$project_name/([^:]+):" ]]; then
                local session_name="${match[1]}"
                # Add to worktrees if not already there
                if [[ ! " ${worktrees[@]} " =~ " ${session_name} " ]]; then
                    worktrees+=("$session_name")
                fi
            fi
        done < <(tmux list-sessions 2>/dev/null)
    fi
    
    _describe 'worktree' worktrees
}

_worktree "$@"